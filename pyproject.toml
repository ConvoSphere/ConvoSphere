[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "convosphere"
version = "1.0.0"
description = "AI Assistant Platform with multiple assistants and extensive tool support"
authors = [{name = "AI Assistant Team"}]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "litellm>=1.10.0",
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    "weaviate-client>=4.0.0",
    "protobuf>=6.31.1",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "bcrypt>=4.1.0",
    "python-multipart>=0.0.6",
    "authlib[fastapi]>=1.2.0",
    "fastapi-sso>=0.4.0",
    "pysaml2>=7.4.0",
    "itsdangerous>=2.1.0",
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "python-magic>=0.4.27",
    "pypdf>=3.17.0",
    "markdown>=3.5.0",
    "docling>=0.1.0",
    "beautifulsoup4>=4.12.0",
    "requests>=2.31.0",
    "email-validator>=2.1.0",
    "numpy>=1.24.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation>=0.42.0",
    "opentelemetry-instrumentation-fastapi>=0.42.0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42.0",
    "opentelemetry-instrumentation-redis>=0.42.0",
    "opentelemetry-exporter-otlp>=1.21.0",
    "websockets>=12.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.6",
    "bandit>=1.7.5",
    "mypy>=1.7.1",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.5.0",
    "black>=23.11.0",
    "isort>=5.12.0",
]

# Ruff Configuration
[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "LOG", # flake8-logging-format
    "NPY", # flake8-numpy
    "AIR", # flake8-airflow
    "PERF", # perflint
    "FBT", # flake8-boolean-trap
    "BLE", # flake8-blind-except
    "A",   # flake8-builtins
    "C90", # mccabe
    "DTZ", # flake8-datetimez
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "TID", # flake8-tidy-imports
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "S",   # bandit
]

ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR0912", # too many branches
    "PLR0911", # too many return statements
    "PLR2004", # magic value used in comparison
    "COM812", # missing trailing comma, conflicts with formatter
]

per-file-ignores = {"__init__.py" = ["F401"], "tests/**/*" = ["S101", "PLR2004"], "**/migrations/**" = ["E501", "F401"]}

# Bandit Configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "env", ".env", "**/migrations"]
skips = ["B101", "B601", "B110"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "litellm.*",
    "weaviate.*",
    "nicegui.*",
    "redis.*",
    "psycopg2.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
testpaths = ["tests", "backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=backend",
    "--cov=frontend",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = ["venv", ".venv", "env", ".env", "**/migrations"] 