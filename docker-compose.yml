

services:
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      args:
        - REQUIREMENTS_FILE=${REQUIREMENTS_FILE:-requirements.txt}
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://convosphere:convosphere_password@postgres:5432/convosphere
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
      - OPENAI_API_KEY=sk-3dd4I14gJ4rqM3mWsVbGRw
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LITELLM_PROXY_HOST=https://admin-litellm.internal.sanjo.foo
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production-minimum-32-chars}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      - UPLOAD_DIR=/app/uploads
      - CHUNK_SIZE=${CHUNK_SIZE:-500}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-50}
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-text-embedding-ada-002}
      - DEFAULT_CHAT_MODEL=${DEFAULT_CHAT_MODEL:-gpt-3.5-turbo}
      - SUPPORTED_LANGUAGES=en,de,fr,es,ar,ja
      - DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE:-en}
      - BACKEND_URL=${BACKEND_URL:-http://backend:8000}
      - WS_URL=${WS_URL:-ws://backend:8000}
      - FRONTEND_URL=${FRONTEND_URL:-http://frontend:8080}
      - DEBUG=true
      - ENVIRONMENT=development

    volumes:
      - ./uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./backend:/app/backend  # Mount source code for development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_started
    restart: unless-stopped
    networks:
      - convosphere-network

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    ports:
      - "8081:8080"
    environment:
      - VITE_API_URL=${BACKEND_URL:-http://backend:8000}
      - VITE_WS_URL=${WS_URL:-ws://backend:8000}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - convosphere-network

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=convosphere
      - POSTGRES_USER=convosphere
      - POSTGRES_PASSWORD=convosphere_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - convosphere-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U convosphere -d convosphere"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - convosphere-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  weaviate:
    image: semitechnologies/weaviate:1.23.7
    ports:
      - "8080:8080"
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: unless-stopped
    networks:
      - convosphere-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
  weaviate_data:
  redis_data:

networks:
  convosphere-network:
    driver: bridge 