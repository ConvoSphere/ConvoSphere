version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chatassistant_postgres
    environment:
      POSTGRES_DB: chatassistant
      POSTGRES_USER: chatassistant
      POSTGRES_PASSWORD: chatassistant_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - chatassistant_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatassistant"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chatassistant_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - chatassistant_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: chatassistant_weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
      TELEMETRY_PUSH: 'false'
    volumes:
      - weaviate_data:/var/lib/weaviate
    ports:
      - "8080:8080"
    networks:
      - chatassistant_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: chatassistant_backend
    environment:
      - DEBUG=true
      - DATABASE_URL=postgresql://chatassistant:chatassistant_password@postgres:5432/chatassistant
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
    volumes:
      - ./backend:/app/backend
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    networks:
      - chatassistant_network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    container_name: chatassistant_frontend
    environment:
      - BACKEND_URL=http://backend:8000
    volumes:
      - ./frontend:/app/frontend
    ports:
      - "8081:8080"
    depends_on:
      - backend
    networks:
      - chatassistant_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: chatassistant_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "8082:80"
    depends_on:
      - backend
      - frontend
    networks:
      - chatassistant_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  weaviate_data:
    driver: local

networks:
  chatassistant_network:
    driver: bridge 