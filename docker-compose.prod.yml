version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      args:
        - REQUIREMENTS_FILE=requirements-prod.txt
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - WEAVIATE_URL=${WEAVIATE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - LITELLM_PROXY_HOST=${LITELLM_PROXY_HOST}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - UPLOAD_DIR=/app/uploads
      - CHUNK_SIZE=${CHUNK_SIZE:-500}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-50}
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-text-embedding-ada-002}
      - DEFAULT_CHAT_MODEL=${DEFAULT_CHAT_MODEL:-gpt-4}
      - SUPPORTED_LANGUAGES=${SUPPORTED_LANGUAGES:-en,de,fr,es,ar,ja}
      - DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE:-en}
      - BACKEND_URL=${BACKEND_URL}
      - WS_URL=${WS_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - DEBUG=false
      - ENVIRONMENT=production
      - CORS_ORIGINS=${CORS_ORIGINS}
      - CSRF_PROTECTION_ENABLED=true
      - CSRF_TOKEN_EXPIRE_MINUTES=${CSRF_TOKEN_EXPIRE_MINUTES:-30}
      - CREATE_DEFAULT_ADMIN=false
      - CREATE_DEFAULT_ASSISTANT=false
    env_file:
      - .env.prod
    volumes:
      - ./uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_started
    restart: unless-stopped
    networks:
      - convosphere-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    ports:
      - "80:8080"
    environment:
      - VITE_API_URL=${BACKEND_URL}
      - VITE_WS_URL=${WS_URL}
      - VITE_ENVIRONMENT=production
    env_file:
      - .env.prod
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - convosphere-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - convosphere-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    volumes:
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - convosphere-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  weaviate:
    image: semitechnologies/weaviate:1.23.7
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: unless-stopped
    networks:
      - convosphere-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
  weaviate_data:
  redis_data:

networks:
  convosphere-network:
    driver: bridge