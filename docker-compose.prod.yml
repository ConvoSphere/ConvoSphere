version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      args:
        - REQUIREMENTS_FILE=${REQUIREMENTS_FILE:-requirements-prod.txt}
    ports:
      - "8000:8000"  # Nur Backend-API ist extern erreichbar
    env_file:
      - .env.production
    secrets:
      - openai_api_key
      - secret_key
      - database_url
    environment:
      - OPENAI_API_KEY_FILE=/run/secrets/openai_api_key
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - DATABASE_URL_FILE=/run/secrets/database_url
      - DEBUG=false
      - ENVIRONMENT=production
    volumes:
      - ./uploads:/app/uploads:ro  # Read-only für Uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_started
    restart: unless-stopped
    networks:
      - external-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    ports:
      - "8081:8080"  # Frontend ist extern erreichbar
    env_file:
      - .env.production
    environment:
      - VITE_API_URL=${BACKEND_URL:-https://yourdomain.com}
      - VITE_WS_URL=${WS_URL:-wss://yourdomain.com}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - external-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15
    env_file:
      - .env.production
    environment:
      - POSTGRES_DB=convosphere
      - POSTGRES_USER=convosphere
      - POSTGRES_PASSWORD_FILE=/run/secrets/database_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    # KEINE externen Ports mehr!
    restart: unless-stopped
    networks:
      - internal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U convosphere -d convosphere"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    secrets:
      - database_password

  redis:
    image: redis:7-alpine
    # KEINE externen Ports mehr!
    volumes:
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - internal-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  weaviate:
    image: semitechnologies/weaviate:1.23.7
    # KEINE externen Ports mehr!
    env_file:
      - .env.production
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=false  # Authentifizierung aktivieren
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: unless-stopped
    networks:
      - internal-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Reverse Proxy für zusätzliche Sicherheit
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - external-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  weaviate_data:
    driver: local
  redis_data:
    driver: local

secrets:
  openai_api_key:
    file: ./secrets/openai_api_key
  secret_key:
    file: ./secrets/secret_key
  database_url:
    file: ./secrets/database_url
  database_password:
    file: ./secrets/database_password

networks:
  internal-network:
    internal: true  # Nur interne Kommunikation
    driver: bridge
  external-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16