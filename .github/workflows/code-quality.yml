name: Code Quality Checks

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  # Ruff linting and formatting
  ruff:
    runs-on: ubuntu-latest
    name: Ruff Linting
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff bandit mypy black isort
      
      - name: Run Ruff linter
        run: |
          ruff check backend/ frontend/ --output-format=github
      
      - name: Run Ruff formatter check
        run: |
          ruff format --check backend/ frontend/
      
      - name: Run Black formatter check
        run: |
          black --check --diff backend/ frontend/
      
      - name: Run isort check
        run: |
          isort --check-only --diff backend/ frontend/

  # Bandit security checks
  bandit:
    runs-on: ubuntu-latest
    name: Security Checks
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit
      
      - name: Run Bandit security scan
        run: |
          bandit -r backend/ frontend/ -f json -o bandit-report.json || true
      
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

  # MyPy type checking
  mypy:
    runs-on: ubuntu-latest
    name: Type Checking
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy types-all
          pip install -r requirements.txt
          pip install -r backend/requirements.txt
          pip install -r frontend/requirements.txt
      
      - name: Run MyPy type checker
        run: |
          mypy backend/ frontend/ --ignore-missing-imports

  # Pytest testing
  pytest:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio
          pip install -r requirements.txt
          pip install -r backend/requirements.txt
          pip install -r frontend/requirements.txt
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          WEAVIATE_URL: http://localhost:8080
        run: |
          pytest --cov=backend --cov=frontend --cov-report=xml --cov-report=html
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30

  # Documentation build check
  docs-build:
    runs-on: ubuntu-latest
    name: Documentation Build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements-docs.txt
          pip install mkdocs-material[imaging]
          pip install mkdocs-mermaid2-plugin
          pip install mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-minify-plugin
      
      - name: Build documentation
        run: |
          mkdocs build --strict
      
      - name: Upload documentation build
        uses: actions/upload-artifact@v4
        with:
          name: documentation-build
          path: site/
          retention-days: 7

  # Code quality summary
  quality-summary:
    runs-on: ubuntu-latest
    name: Quality Summary
    needs: [ruff, bandit, mypy, pytest, docs-build]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate quality report
        run: |
          echo "## Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.pytest.result }}" == "success" ]; then
            echo "✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Linting Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.ruff.result }}" == "success" ]; then
            echo "✅ Ruff checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Ruff checks failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.bandit.result }}" == "success" ]; then
            echo "✅ Security checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security issues found (check artifacts)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Type Checking" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.mypy.result }}" == "success" ]; then
            echo "✅ Type checking passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Type checking failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Documentation" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.docs-build.result }}" == "success" ]; then
            echo "✅ Documentation builds successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Documentation build failed" >> $GITHUB_STEP_SUMMARY
          fi