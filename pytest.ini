[tool:pytest]
# Test discovery and execution
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --maxfail=10
    --durations=10
    --color=yes
    --cov=backend
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80

# Markers for test categorization
markers =
    # Test types
    unit: Unit tests (fast, isolated)
    integration: Integration tests (medium speed, external dependencies)
    e2e: End-to-end tests (slow, full system)
    performance: Performance tests
    security: Security tests
    
    # Test categories
    fast: Fast tests (< 1 second)
    comprehensive: Comprehensive tests with edge cases
    api: API endpoint tests
    service: Service layer tests
    model: Model tests
    utils: Utility function tests
    
    # Feature-specific markers
    auth: Authentication related tests
    users: User management tests
    assistants: Assistant management tests
    conversations: Conversation tests
    tools: Tool management tests
    knowledge: Knowledge base tests
    health: Health check tests
    search: Search functionality tests
    mcp: Model Context Protocol tests
    
    # Special markers
    asyncio: Async tests
    slow: Slow tests (> 5 seconds)
    external: Tests requiring external services
    database: Database integration tests
    redis: Redis integration tests
    weaviate: Weaviate integration tests
    openai: OpenAI API tests
    
    # CI/CD markers
    ci: Tests that should run in CI
    smoke: Smoke tests for basic functionality
    regression: Regression tests

# Test filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:.*pytest.*
    ignore::FutureWarning
    ignore::RuntimeWarning:.*asyncio.*
    ignore::ResourceWarning

# Coverage configuration
[coverage:run]
source = backend
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */env/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod